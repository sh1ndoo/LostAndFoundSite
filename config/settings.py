"""
Django settings for LostAndFoundSite project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path

import dj_database_url

from .config import config

config.load()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).parents[1].resolve()

SECRET_KEY = config.SECRET_KEY
SITE_ID = 1
DEBUG = config.DEBUG

ALLOWED_HOSTS = config.ALLOWED_HOSTS
CSRF_TRUSTED_ORIGINS = ['https://things.ifknow.ru']

YANDEX_METRICA_COUNTER_ID = config.YANDEX_METRICA_COUNTER_ID
GOOGLE_ANALYTICS_GTAG_PROPERTY_ID = config.GOOGLE_ANALYTICS_GTAG_PROPERTY_ID

AUTH_USER_MODEL = "users.User"

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'imagekit',
    'apps.things',
    'apps.users',
    'storages',
    'social_django',
    'analytical',
    'django.contrib.sites',
    'django.contrib.sitemaps',
#    'debug_toolbar'
]

MIDDLEWARE = [
#    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# INTERNAL_IPS = [
#    "127.0.0.1",
#]

ROOT_URLCONF = "config.urls"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
WSGI_APPLICATION = "config.wsgi.application"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379",
    }
}

# Storage settings for media files

STORAGES = {
    "default": {
        "BACKEND": "storage.CachedS3Storage",
        "OPTIONS": {
            "access_key": config.B2_KEY_ID,
            "secret_key": config.B2_APPLICATION_KEY,

            # --- Настройки бакета и эндпоинта ---
            "bucket_name": config.B2_BUCKET_NAME,
            "endpoint_url": config.B2_ENDPOINT_URL,

            # --- Настройки генерации URL и доступа ---
            "querystring_auth": True,  # Генерировать подписанные URL (для приватных бакетов)
            "querystring_expire": 3600,
            "signature_version": 's3v4',
            "default_acl": None,

            "region_name": 'us-east-005',
            "object_parameters": {
                'CacheControl': 'max-age=86400, public, immutable',
                'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
            },
            "file_overwrite": False,
            "location": "media",
            "use_ssl": True,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}


# Database

DATABASES = {
    "default": dj_database_url.parse(
        config.DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization

LANGUAGE_CODE = "ru-RU"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Authentication
LOGIN_REDIRECT_URL = "things:index"
LOGOUT_REDIRECT_URL = "things:index"
LOGIN_URL = "users:login"

AUTHENTICATION_BACKENDS = [
    'social_core.backends.github.GithubOAuth2',
    'apps.users.backends.PhoneOTPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

SOCIAL_AUTH_GITHUB_KEY = config.SOCIAL_AUTH_GITHUB_KEY
SOCIAL_AUTH_GITHUB_SECRET = config.SOCIAL_AUTH_GITHUB_SECRET

# Security settings
print(config.DJANGO_ENV)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if config.DJANGO_ENV == "production":
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_PRELOAD = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}